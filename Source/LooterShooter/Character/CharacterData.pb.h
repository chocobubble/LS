// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharacterData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CharacterData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CharacterData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CharacterData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CharacterData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CharacterData_2eproto;
class CharacterData;
struct CharacterDataDefaultTypeInternal;
extern CharacterDataDefaultTypeInternal _CharacterData_default_instance_;
class WeaponSaveData;
struct WeaponSaveDataDefaultTypeInternal;
extern WeaponSaveDataDefaultTypeInternal _WeaponSaveData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CharacterData* Arena::CreateMaybeMessage<::CharacterData>(Arena*);
template<> ::WeaponSaveData* Arena::CreateMaybeMessage<::WeaponSaveData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum WeaponSaveData_WeaponType : int {
  WeaponSaveData_WeaponType_EWT_RIFLE = 0,
  WeaponSaveData_WeaponType_EWT_PISTOL = 1,
  WeaponSaveData_WeaponType_EWT_SHOTGUN = 2,
  WeaponSaveData_WeaponType_WeaponSaveData_WeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WeaponSaveData_WeaponType_WeaponSaveData_WeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WeaponSaveData_WeaponType_IsValid(int value);
constexpr WeaponSaveData_WeaponType WeaponSaveData_WeaponType_WeaponType_MIN = WeaponSaveData_WeaponType_EWT_RIFLE;
constexpr WeaponSaveData_WeaponType WeaponSaveData_WeaponType_WeaponType_MAX = WeaponSaveData_WeaponType_EWT_SHOTGUN;
constexpr int WeaponSaveData_WeaponType_WeaponType_ARRAYSIZE = WeaponSaveData_WeaponType_WeaponType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeaponSaveData_WeaponType_descriptor();
template<typename T>
inline const std::string& WeaponSaveData_WeaponType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WeaponSaveData_WeaponType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WeaponSaveData_WeaponType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WeaponSaveData_WeaponType_descriptor(), enum_t_value);
}
inline bool WeaponSaveData_WeaponType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WeaponSaveData_WeaponType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WeaponSaveData_WeaponType>(
    WeaponSaveData_WeaponType_descriptor(), name, value);
}
// ===================================================================

class CharacterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CharacterData) */ {
 public:
  inline CharacterData() : CharacterData(nullptr) {}
  ~CharacterData() override;
  explicit PROTOBUF_CONSTEXPR CharacterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterData(const CharacterData& from);
  CharacterData(CharacterData&& from) noexcept
    : CharacterData() {
    *this = ::std::move(from);
  }

  inline CharacterData& operator=(const CharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterData& operator=(CharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterData* internal_default_instance() {
    return reinterpret_cast<const CharacterData*>(
               &_CharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharacterData& a, CharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterData& from) {
    CharacterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CharacterData";
  }
  protected:
  explicit CharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kWeaponSaveDataFieldNumber = 5,
    kLevelFieldNumber = 1,
    kExpFieldNumber = 2,
    kGoldFieldNumber = 4,
    kRifleAmmoFieldNumber = 6,
  };
  // string playerName = 3;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // .WeaponSaveData weaponSaveData = 5;
  bool has_weaponsavedata() const;
  private:
  bool _internal_has_weaponsavedata() const;
  public:
  void clear_weaponsavedata();
  const ::WeaponSaveData& weaponsavedata() const;
  PROTOBUF_NODISCARD ::WeaponSaveData* release_weaponsavedata();
  ::WeaponSaveData* mutable_weaponsavedata();
  void set_allocated_weaponsavedata(::WeaponSaveData* weaponsavedata);
  private:
  const ::WeaponSaveData& _internal_weaponsavedata() const;
  ::WeaponSaveData* _internal_mutable_weaponsavedata();
  public:
  void unsafe_arena_set_allocated_weaponsavedata(
      ::WeaponSaveData* weaponsavedata);
  ::WeaponSaveData* unsafe_arena_release_weaponsavedata();

  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 exp = 2;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // int32 gold = 4;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // int32 rifleAmmo = 6;
  void clear_rifleammo();
  int32_t rifleammo() const;
  void set_rifleammo(int32_t value);
  private:
  int32_t _internal_rifleammo() const;
  void _internal_set_rifleammo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CharacterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    ::WeaponSaveData* weaponsavedata_;
    int32_t level_;
    int32_t exp_;
    int32_t gold_;
    int32_t rifleammo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CharacterData_2eproto;
};
// -------------------------------------------------------------------

class WeaponSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WeaponSaveData) */ {
 public:
  inline WeaponSaveData() : WeaponSaveData(nullptr) {}
  ~WeaponSaveData() override;
  explicit PROTOBUF_CONSTEXPR WeaponSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WeaponSaveData(const WeaponSaveData& from);
  WeaponSaveData(WeaponSaveData&& from) noexcept
    : WeaponSaveData() {
    *this = ::std::move(from);
  }

  inline WeaponSaveData& operator=(const WeaponSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeaponSaveData& operator=(WeaponSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeaponSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeaponSaveData* internal_default_instance() {
    return reinterpret_cast<const WeaponSaveData*>(
               &_WeaponSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WeaponSaveData& a, WeaponSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(WeaponSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeaponSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeaponSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeaponSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WeaponSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WeaponSaveData& from) {
    WeaponSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeaponSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WeaponSaveData";
  }
  protected:
  explicit WeaponSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WeaponSaveData_WeaponType WeaponType;
  static constexpr WeaponType EWT_RIFLE =
    WeaponSaveData_WeaponType_EWT_RIFLE;
  static constexpr WeaponType EWT_PISTOL =
    WeaponSaveData_WeaponType_EWT_PISTOL;
  static constexpr WeaponType EWT_SHOTGUN =
    WeaponSaveData_WeaponType_EWT_SHOTGUN;
  static inline bool WeaponType_IsValid(int value) {
    return WeaponSaveData_WeaponType_IsValid(value);
  }
  static constexpr WeaponType WeaponType_MIN =
    WeaponSaveData_WeaponType_WeaponType_MIN;
  static constexpr WeaponType WeaponType_MAX =
    WeaponSaveData_WeaponType_WeaponType_MAX;
  static constexpr int WeaponType_ARRAYSIZE =
    WeaponSaveData_WeaponType_WeaponType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WeaponType_descriptor() {
    return WeaponSaveData_WeaponType_descriptor();
  }
  template<typename T>
  static inline const std::string& WeaponType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WeaponType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WeaponType_Name.");
    return WeaponSaveData_WeaponType_Name(enum_t_value);
  }
  static inline bool WeaponType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WeaponType* value) {
    return WeaponSaveData_WeaponType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponLevelFieldNumber = 1,
    kWeaponEnhancementLevelFieldNumber = 2,
    kWeaponTypeFieldNumber = 3,
  };
  // int32 weaponLevel = 1;
  void clear_weaponlevel();
  int32_t weaponlevel() const;
  void set_weaponlevel(int32_t value);
  private:
  int32_t _internal_weaponlevel() const;
  void _internal_set_weaponlevel(int32_t value);
  public:

  // int32 weaponEnhancementLevel = 2;
  void clear_weaponenhancementlevel();
  int32_t weaponenhancementlevel() const;
  void set_weaponenhancementlevel(int32_t value);
  private:
  int32_t _internal_weaponenhancementlevel() const;
  void _internal_set_weaponenhancementlevel(int32_t value);
  public:

  // .WeaponSaveData.WeaponType weaponType = 3;
  void clear_weapontype();
  ::WeaponSaveData_WeaponType weapontype() const;
  void set_weapontype(::WeaponSaveData_WeaponType value);
  private:
  ::WeaponSaveData_WeaponType _internal_weapontype() const;
  void _internal_set_weapontype(::WeaponSaveData_WeaponType value);
  public:

  // @@protoc_insertion_point(class_scope:WeaponSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t weaponlevel_;
    int32_t weaponenhancementlevel_;
    int weapontype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CharacterData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CharacterData

// int32 level = 1;
inline void CharacterData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CharacterData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CharacterData::level() const {
  // @@protoc_insertion_point(field_get:CharacterData.level)
  return _internal_level();
}
inline void CharacterData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CharacterData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CharacterData.level)
}

// int32 exp = 2;
inline void CharacterData::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t CharacterData::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t CharacterData::exp() const {
  // @@protoc_insertion_point(field_get:CharacterData.exp)
  return _internal_exp();
}
inline void CharacterData::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void CharacterData::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:CharacterData.exp)
}

// string playerName = 3;
inline void CharacterData::clear_playername() {
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& CharacterData::playername() const {
  // @@protoc_insertion_point(field_get:CharacterData.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterData::set_playername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CharacterData.playerName)
}
inline std::string* CharacterData::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:CharacterData.playerName)
  return _s;
}
inline const std::string& CharacterData::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void CharacterData::_internal_set_playername(const std::string& value) {
  
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterData::_internal_mutable_playername() {
  
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterData::release_playername() {
  // @@protoc_insertion_point(field_release:CharacterData.playerName)
  return _impl_.playername_.Release();
}
inline void CharacterData::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CharacterData.playerName)
}

// int32 gold = 4;
inline void CharacterData::clear_gold() {
  _impl_.gold_ = 0;
}
inline int32_t CharacterData::_internal_gold() const {
  return _impl_.gold_;
}
inline int32_t CharacterData::gold() const {
  // @@protoc_insertion_point(field_get:CharacterData.gold)
  return _internal_gold();
}
inline void CharacterData::_internal_set_gold(int32_t value) {
  
  _impl_.gold_ = value;
}
inline void CharacterData::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CharacterData.gold)
}

// .WeaponSaveData weaponSaveData = 5;
inline bool CharacterData::_internal_has_weaponsavedata() const {
  return this != internal_default_instance() && _impl_.weaponsavedata_ != nullptr;
}
inline bool CharacterData::has_weaponsavedata() const {
  return _internal_has_weaponsavedata();
}
inline void CharacterData::clear_weaponsavedata() {
  if (GetArenaForAllocation() == nullptr && _impl_.weaponsavedata_ != nullptr) {
    delete _impl_.weaponsavedata_;
  }
  _impl_.weaponsavedata_ = nullptr;
}
inline const ::WeaponSaveData& CharacterData::_internal_weaponsavedata() const {
  const ::WeaponSaveData* p = _impl_.weaponsavedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::WeaponSaveData&>(
      ::_WeaponSaveData_default_instance_);
}
inline const ::WeaponSaveData& CharacterData::weaponsavedata() const {
  // @@protoc_insertion_point(field_get:CharacterData.weaponSaveData)
  return _internal_weaponsavedata();
}
inline void CharacterData::unsafe_arena_set_allocated_weaponsavedata(
    ::WeaponSaveData* weaponsavedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weaponsavedata_);
  }
  _impl_.weaponsavedata_ = weaponsavedata;
  if (weaponsavedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CharacterData.weaponSaveData)
}
inline ::WeaponSaveData* CharacterData::release_weaponsavedata() {
  
  ::WeaponSaveData* temp = _impl_.weaponsavedata_;
  _impl_.weaponsavedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::WeaponSaveData* CharacterData::unsafe_arena_release_weaponsavedata() {
  // @@protoc_insertion_point(field_release:CharacterData.weaponSaveData)
  
  ::WeaponSaveData* temp = _impl_.weaponsavedata_;
  _impl_.weaponsavedata_ = nullptr;
  return temp;
}
inline ::WeaponSaveData* CharacterData::_internal_mutable_weaponsavedata() {
  
  if (_impl_.weaponsavedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::WeaponSaveData>(GetArenaForAllocation());
    _impl_.weaponsavedata_ = p;
  }
  return _impl_.weaponsavedata_;
}
inline ::WeaponSaveData* CharacterData::mutable_weaponsavedata() {
  ::WeaponSaveData* _msg = _internal_mutable_weaponsavedata();
  // @@protoc_insertion_point(field_mutable:CharacterData.weaponSaveData)
  return _msg;
}
inline void CharacterData::set_allocated_weaponsavedata(::WeaponSaveData* weaponsavedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weaponsavedata_;
  }
  if (weaponsavedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weaponsavedata);
    if (message_arena != submessage_arena) {
      weaponsavedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponsavedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weaponsavedata_ = weaponsavedata;
  // @@protoc_insertion_point(field_set_allocated:CharacterData.weaponSaveData)
}

// int32 rifleAmmo = 6;
inline void CharacterData::clear_rifleammo() {
  _impl_.rifleammo_ = 0;
}
inline int32_t CharacterData::_internal_rifleammo() const {
  return _impl_.rifleammo_;
}
inline int32_t CharacterData::rifleammo() const {
  // @@protoc_insertion_point(field_get:CharacterData.rifleAmmo)
  return _internal_rifleammo();
}
inline void CharacterData::_internal_set_rifleammo(int32_t value) {
  
  _impl_.rifleammo_ = value;
}
inline void CharacterData::set_rifleammo(int32_t value) {
  _internal_set_rifleammo(value);
  // @@protoc_insertion_point(field_set:CharacterData.rifleAmmo)
}

// -------------------------------------------------------------------

// WeaponSaveData

// int32 weaponLevel = 1;
inline void WeaponSaveData::clear_weaponlevel() {
  _impl_.weaponlevel_ = 0;
}
inline int32_t WeaponSaveData::_internal_weaponlevel() const {
  return _impl_.weaponlevel_;
}
inline int32_t WeaponSaveData::weaponlevel() const {
  // @@protoc_insertion_point(field_get:WeaponSaveData.weaponLevel)
  return _internal_weaponlevel();
}
inline void WeaponSaveData::_internal_set_weaponlevel(int32_t value) {
  
  _impl_.weaponlevel_ = value;
}
inline void WeaponSaveData::set_weaponlevel(int32_t value) {
  _internal_set_weaponlevel(value);
  // @@protoc_insertion_point(field_set:WeaponSaveData.weaponLevel)
}

// int32 weaponEnhancementLevel = 2;
inline void WeaponSaveData::clear_weaponenhancementlevel() {
  _impl_.weaponenhancementlevel_ = 0;
}
inline int32_t WeaponSaveData::_internal_weaponenhancementlevel() const {
  return _impl_.weaponenhancementlevel_;
}
inline int32_t WeaponSaveData::weaponenhancementlevel() const {
  // @@protoc_insertion_point(field_get:WeaponSaveData.weaponEnhancementLevel)
  return _internal_weaponenhancementlevel();
}
inline void WeaponSaveData::_internal_set_weaponenhancementlevel(int32_t value) {
  
  _impl_.weaponenhancementlevel_ = value;
}
inline void WeaponSaveData::set_weaponenhancementlevel(int32_t value) {
  _internal_set_weaponenhancementlevel(value);
  // @@protoc_insertion_point(field_set:WeaponSaveData.weaponEnhancementLevel)
}

// .WeaponSaveData.WeaponType weaponType = 3;
inline void WeaponSaveData::clear_weapontype() {
  _impl_.weapontype_ = 0;
}
inline ::WeaponSaveData_WeaponType WeaponSaveData::_internal_weapontype() const {
  return static_cast< ::WeaponSaveData_WeaponType >(_impl_.weapontype_);
}
inline ::WeaponSaveData_WeaponType WeaponSaveData::weapontype() const {
  // @@protoc_insertion_point(field_get:WeaponSaveData.weaponType)
  return _internal_weapontype();
}
inline void WeaponSaveData::_internal_set_weapontype(::WeaponSaveData_WeaponType value) {
  
  _impl_.weapontype_ = value;
}
inline void WeaponSaveData::set_weapontype(::WeaponSaveData_WeaponType value) {
  _internal_set_weapontype(value);
  // @@protoc_insertion_point(field_set:WeaponSaveData.weaponType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WeaponSaveData_WeaponType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WeaponSaveData_WeaponType>() {
  return ::WeaponSaveData_WeaponType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CharacterData_2eproto
